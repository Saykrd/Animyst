var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var App;
(function (App) {
    var Main = (function (_super) {
        __extends(Main, _super);
        function Main() {
            var _this = _super.call(this) || this;
            _this.initSignal.addOnce(_this.onInit, _this);
            _this.bootSignal.addOnce(_this.onBoot, _this);
            return _this;
        }
        Main.prototype.onBoot = function () {
            Animyst.Log.output("App Booted!");
        };
        Main.prototype.onInit = function () {
            Animyst.Log.output("App Initialized!");
            this.runTest(App.PIXITests);
        };
        Main.prototype.runTest = function (cls) {
            var state = new cls();
            this.run(state);
        };
        return Main;
    }(Animyst.Application));
    App.Main = Main;
})(App || (App = {}));
var App;
(function (App) {
    var PIXITests = (function (_super) {
        __extends(PIXITests, _super);
        function PIXITests() {
            return _super.call(this, 'PIXITests') || this;
        }
        PIXITests.prototype.setup = function () {
            this.viewport = new Animyst.ViewPIXI();
            this.viewport.init({
                backgroundColor: 0x555555
            });
            this.viewport.append();
            var t1 = PIXI.Texture.from(Animyst.DataLoad.getPath('redball1')); //PIXI.Texture.fromCanvas(Animyst.DataLoad.getAsset('redball1'));
            var t2 = PIXI.Texture.from(Animyst.DataLoad.getPath('yellowball1')); //PIXI.Texture.fromCanvas(Animyst.DataLoad.getAsset('yellowball1'));
            var t3 = PIXI.Texture.from(Animyst.DataLoad.getPath('greenball1')); //PIXI.Texture.fromCanvas(Animyst.DataLoad.getAsset('greenball1'));
            //var s1:PIXI.Sprite = new PIXI.Sprite(t1);//PIXI.Sprite.fromImage(Animyst.DataLoad.getData('redball1').src);
            //var s2:PIXI.Sprite = new PIXI.Sprite(t3);
            var atlas = new PIXI.spine.core.TextureAtlas(Animyst.DataLoad.getAsset('raptor_atlas'), function (line, callback) {
                callback(PIXI.BaseTexture.from(Animyst.DataLoad.getPath('raptor_sheet')));
            });
            var rawSkelData = Animyst.DataLoad.getAsset('raptor_data');
            var spineJSONParser = new PIXI.spine.core.SkeletonJson(new PIXI.spine.core.AtlasAttachmentLoader(atlas));
            var skeletonData = spineJSONParser.readSkeletonData(rawSkelData);
            var anim = new PIXI.spine.Spine(skeletonData);
            this.viewport.stage.addChild(anim);
            if (anim.state.hasAnimation("walk")) {
                anim.state.setAnimation(0, "walk", true);
            }
            anim.scale.set(0.75, 0.75);
            anim.x = this.viewport.halfWidth;
            anim.y = this.viewport.halfHeight + anim.height / 2;
            var button = new Animyst.PIXIModules.Button(t1, { downTexture: t3, overTexture: t2 });
            this.viewport.stage.addChild(button);
            button.name = "myButt";
            button.down.add(function (id, button) {
                console.log(id, button.name);
            });
            button.up.add(function (id, button) {
                console.log(id, button.name);
            });
            button.over.add(function (id, button) {
                console.log(id, button.name);
            });
            button.out.add(function (id, button) {
                console.log(id, button.name);
            });
            //this.viewport.stage.addChild(s1);
            //this.viewport.stage.addChild(s2);
            /*s1.x = 100;
            s1.y = 100;

            s2.x = this.viewport.width / 2;
            s2.y = this.viewport.height / 2;

            s1.interactive = true;
            s1.buttonMode = true;

            s1.on('pointerdown', function(){
                console.log("pointer down~~~");
            })

            s1.on('pointerup', function(){
                console.log("pointer up~~~");
            })*/
        };
        PIXITests.prototype.frameUpdate = function (delta, framecount) {
            this.viewport.render();
        };
        return PIXITests;
    }(Animyst.AppState));
    App.PIXITests = PIXITests;
})(App || (App = {}));
var App;
(function (App) {
    var View3DTests = (function (_super) {
        __extends(View3DTests, _super);
        function View3DTests() {
            return _super.call(this, "game") || this;
            // code...
        }
        View3DTests.prototype.setup = function () {
            console.log("Setting up game");
            this.viewport = new Animyst.View3D();
            this.viewport.init({ resize: true, debugControls: true });
            this.viewport.append();
            this.viewport.create(Animyst.Scene3D, 'base', {
                addAxis: true,
                debugControls: true,
                cameras: [
                    { name: "camera0", type: "perspective", x: 500, y: 500, z: 500, fov: 50, aspect: this.viewport.aspect, near: 0.1, far: 2000, main: true }
                ]
            });
            this.viewport.create(Animyst.Scene3D, 'ui', {
                addAxis: true,
                debugControls: false,
                cameras: [
                    {
                        name: "camera0", type: "orthographic",
                        x: this.viewport.width / 2, y: -this.viewport.height / 2, z: 10,
                        left: -this.viewport.width / 2, right: this.viewport.width / 2,
                        top: this.viewport.height / 2, bottom: -this.viewport.height / 2,
                        near: 1, far: 2000, main: true, lookAtScene: false
                    }
                ]
            });
            var base = this.viewport.get('base');
            var ui = this.viewport.get('ui');
            var texture0 = new THREE.CanvasTexture(Animyst.DataLoad.getAsset("redball1"));
            var texture1 = new THREE.CanvasTexture(Animyst.DataLoad.getAsset("greenball2"));
            var smatr0 = new THREE.SpriteMaterial({ map: texture0, color: 0xffffff });
            var smatr1 = new THREE.SpriteMaterial({ map: texture1, color: 0xffffff });
            var spriteBase = new THREE.Sprite(smatr1);
            var spriteUI = new THREE.Sprite(smatr0);
            var twidth = spriteUI.material.map.image.width;
            var theight = spriteUI.material.map.image.height;
            console.log(twidth, theight, this.viewport.width, this.viewport.height);
            spriteUI.scale.set(twidth, theight, 1);
            spriteUI.position.set(178, -18, 0);
            spriteBase.position.set(100, 100, 100);
            spriteBase.scale.set(twidth / 2, theight / 2, 1);
            base.scene.add(spriteBase);
            ui.scene.add(spriteUI);
        };
        View3DTests.prototype.frameUpdate = function (delta, framecount) {
            _super.prototype.frameUpdate.call(this, delta, framecount);
            if (this.viewport)
                this.viewport.render();
        };
        return View3DTests;
    }(Animyst.AppState));
    App.View3DTests = View3DTests;
})(App || (App = {}));

//# sourceMappingURL=app.min.js.map
