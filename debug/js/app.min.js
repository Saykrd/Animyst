/*! animyst 2015-03-09 */
Game = function(a) {
    Animyst.AppState.call(this, a), this.inputData = null;
}, Game.prototype = Object.create(Animyst.AppState.prototype), Game.prototype.setup = function() {
    console.log("[Game] Setting Up..."), Animyst.AppState.prototype.setup.call(this), 
    this.inputData = new Animyst.InputData();
    var a = new Animyst.Input(this.inputData), b = new Animyst.InputDisplay(this.inputData), c = new Animyst.Sound();
    a.startup({
        tool: new Tool(),
        element: document.getElementById("game")
    }), b.startup({}), c.startup({}), this.addSystem("input", a), this.addSystem("inputView", b), 
    this.addSystem("sound", c);
}, Game.prototype.start = function() {
    console.log("[Game] Start"), Animyst.AppState.prototype.start.call(this);
}, Game.prototype.update = function(a, b) {
    Animyst.AppState.prototype.update.call(this, a, b);
}, Game.prototype.pause = function() {
    Animyst.AppState.prototype.pause.call(this);
}, Game.prototype.resume = function() {
    Animyst.AppState.prototype.resume.call(this);
}, Game.prototype.kill = function() {
    Animyst.AppState.prototype.kill.call(this);
}, Game.prototype.restart = function() {
    Animyst.AppState.prototype.restart.call(this);
}, Animyst.InputDisplay = function(a) {
    Animyst.System.call(this), this.inputData = a, this.layer = null, this.mouse = null, 
    this.touches = {};
}, Animyst.InputDisplay.prototype = Object.create(Animyst.System.prototype), Animyst.InputDisplay.prototype.startup = function(a) {
    this.inputData.signal.add(this.inputHandler, this), this.layer = new Layer({
        position: new Point()
    }), Animyst.System.prototype.startup.call(this, a);
}, Animyst.InputDisplay.prototype.shutdown = function() {
    this.started = !1, Animyst.System.prototype.shutdown.call(this);
}, Animyst.InputDisplay.prototype.update = function() {}, Animyst.InputDisplay.prototype.inputHandler = function(a, b, c) {
    switch (a) {
      case Animyst.InputData.MOUSE:
        this.mouse || (this.mouse = new Shape.Circle({
            radius: 10,
            fillColor: "#00FFFF",
            opacity: .5
        }), this.layer.addChild(this.mouse)), this.mouse.position = c.point, console.log(c.point), 
        this.mouse.fillColor = c.down ? "#FF0000" : "#00FFFF";
        break;

      case Animyst.InputData.TOUCH:
        switch (b) {
          case Animyst.InputData.TOUCH_ADDED:
            var d = c.uid, e = new Shape.Circle({
                radius: 30,
                fillColor: "#FF0000",
                opacity: .5
            });
            c.webkitForce && (e.radius = 50 * (1 + c.webkitForce)), e.position = new Point(c.pageX, c.pageY), 
            this.touches[d] = e;
            break;

          case Animyst.InputData.TOUCH_REMOVED:
            var d = c.uid, e = this.touches[d];
            e.remove(), this.touches[d] = null, delete this.touches[d];
            break;

          case Animyst.InputData.TOUCH_UPDATED:
            var d = c.uid, e = this.touches[d];
            c.webkitForce && (e.radius = 50 * (1 + c.webkitForce)), e.position = new Point(c.pageX, c.pageY);
        }
        break;

      case Animyst.InputData.KEY:    }
};

var Main = function() {
    this.game = null, this.app = null;
};

Main.prototype = {
    start: function() {
        console.log("===== MAIN ======"), this.app = new Animyst.Application(), this.app.initSignal.addOnce(this.onAppInit, this), 
        this.app.startup({
            paper: !0,
            canvasID: "game"
        });
    },
    onAppInit: function() {
        var a = new Game("game1");
        this.app.run(a);
    }
};