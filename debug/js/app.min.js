var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var App;
(function (App) {
    var Main = (function (_super) {
        __extends(Main, _super);
        function Main() {
            var _this = _super.call(this) || this;
            _this.initSignal.addOnce(_this.onInit, _this);
            _this.bootSignal.addOnce(_this.onBoot, _this);
            return _this;
        }
        Main.prototype.onBoot = function () {
            Animyst.Log.output("App Booted!");
        };
        Main.prototype.onInit = function () {
            Animyst.Log.output("App Initialized!");
            this.runTest(App.PIXITests);
        };
        Main.prototype.runTest = function (cls) {
            var state = new cls();
            this.run(state);
        };
        return Main;
    }(Animyst.Application));
    App.Main = Main;
})(App || (App = {}));
var App;
(function (App) {
    var PIXITests = (function (_super) {
        __extends(PIXITests, _super);
        function PIXITests() {
            return _super.call(this, 'PIXITests') || this;
        }
        PIXITests.prototype.setup = function () {
            this.viewport = new Animyst.ViewPIXI();
            this.viewport.init({
                backgroundColor: 0x555555
            });
            this.viewport.append();
            var gameLayer = this.viewport.create(Animyst.ScenePIXI, "gameLayer", {});
            var uiLayer = this.viewport.create(Animyst.ScenePIXI, "uiLayer", {});
            gameLayer.makeElement('raptor', 'spine', {
                atlas: 'raptor_atlas',
                data: 'raptor_data',
                sheet: 'raptor_sheet',
                anim: 'walk',
                x: this.viewport.halfWidth, y: this.viewport.halfHeight + 600 / 2,
                scale: { x: 0.75, y: 0.75 }
            });
            var button = uiLayer.makeElement('button', 'button', {
                up: 'greenball2',
                down: 'redball1',
                over: 'yellowball1',
                x: 50, y: 500, scale: 0.5
            });
            button.down.add(function (id, button) {
                console.log(id, button.name);
            });
            button.up.add(function (id, button) {
                console.log(id, button.name);
            });
            button.over.add(function (id, button) {
                console.log(id, button.name);
            });
            button.out.add(function (id, button) {
                console.log(id, button.name);
            });
        };
        PIXITests.prototype.frameUpdate = function (delta, framecount) {
            this.viewport.render();
        };
        return PIXITests;
    }(Animyst.AppState));
    App.PIXITests = PIXITests;
})(App || (App = {}));
var App;
(function (App) {
    var View3DTests = (function (_super) {
        __extends(View3DTests, _super);
        function View3DTests() {
            return _super.call(this, "game") || this;
            // code...
        }
        View3DTests.prototype.setup = function () {
            console.log("Setting up game");
            this.viewport = new Animyst.View3D();
            this.viewport.init({ resize: true, debugControls: true });
            this.viewport.append();
            this.viewport.create(Animyst.Scene3D, 'base', {
                addAxis: true,
                debugControls: true,
                cameras: [
                    { name: "camera0", type: "perspective", x: 500, y: 500, z: 500, fov: 50, aspect: this.viewport.aspect, near: 0.1, far: 2000, main: true }
                ]
            });
            this.viewport.create(Animyst.Scene3D, 'ui', {
                addAxis: true,
                debugControls: false,
                cameras: [
                    {
                        name: "camera0", type: "orthographic",
                        x: this.viewport.width / 2, y: -this.viewport.height / 2, z: 10,
                        left: -this.viewport.width / 2, right: this.viewport.width / 2,
                        top: this.viewport.height / 2, bottom: -this.viewport.height / 2,
                        near: 1, far: 2000, main: true, lookAtScene: false
                    }
                ]
            });
            var base = this.viewport.get('base');
            var ui = this.viewport.get('ui');
            var texture0 = new THREE.CanvasTexture(Animyst.DataLoad.getAsset("redball1"));
            var texture1 = new THREE.CanvasTexture(Animyst.DataLoad.getAsset("greenball2"));
            var smatr0 = new THREE.SpriteMaterial({ map: texture0, color: 0xffffff });
            var smatr1 = new THREE.SpriteMaterial({ map: texture1, color: 0xffffff });
            var spriteBase = new THREE.Sprite(smatr1);
            var spriteUI = new THREE.Sprite(smatr0);
            var twidth = spriteUI.material.map.image.width;
            var theight = spriteUI.material.map.image.height;
            console.log(twidth, theight, this.viewport.width, this.viewport.height);
            spriteUI.scale.set(twidth, theight, 1);
            spriteUI.position.set(178, -18, 0);
            spriteBase.position.set(100, 100, 100);
            spriteBase.scale.set(twidth / 2, theight / 2, 1);
            base.scene.add(spriteBase);
            ui.scene.add(spriteUI);
        };
        View3DTests.prototype.frameUpdate = function (delta, framecount) {
            _super.prototype.frameUpdate.call(this, delta, framecount);
            if (this.viewport)
                this.viewport.render();
        };
        return View3DTests;
    }(Animyst.AppState));
    App.View3DTests = View3DTests;
})(App || (App = {}));

//# sourceMappingURL=app.min.js.map
