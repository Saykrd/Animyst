/*! animyst 2015-04-14 */
Game = function(a) {
    Animyst.AppState.call(this, a), this.inputData = null, this.gameData = null;
}, Game.prototype = Object.create(Animyst.AppState.prototype), Game.prototype.setup = function() {
    console.log("[Game] Setting Up..."), Animyst.AppState.prototype.setup.call(this), 
    this.inputData = this.appScope.getDatabase(Animyst.CoreProcess.INPUT), this.gameData = new GameData();
    var a = new GameLogic(this.gameData, this.inputData);
    a.startup(), this.addSystem("gameLogic", a);
}, Game.prototype.start = function() {
    console.log("[Game] Start"), Animyst.AppState.prototype.start.call(this);
}, Game.prototype.update = function(a, b) {
    Animyst.AppState.prototype.update.call(this, a, b);
}, Game.prototype.pause = function() {
    Animyst.AppState.prototype.pause.call(this);
}, Game.prototype.resume = function() {
    Animyst.AppState.prototype.resume.call(this);
}, Game.prototype.kill = function() {
    Animyst.AppState.prototype.kill.call(this);
}, Game.prototype.restart = function() {
    Animyst.AppState.prototype.restart.call(this);
}, GameData = function() {
    Animyst.Database.call(this), this.entities = {}, this.entities._total = 0, this.entityCreationCount = 0, 
    this.addedSignal = new signals.Signal(), this.removedSignal = new signals.Signal(), 
    this.updateSignal = new signals.Signal();
}, GameData.PLAYER = 0, GameData.ENTITY_ADDED = 0, GameData.ENTITY_REMOVED = 1, 
GameData.ENTITY_UPDATED = 2, GameData.prototype = Object.create(Animyst.Database.prototype), 
GameData.prototype.clear = function() {
    Animyst.Database.prototype.clear.call(this);
}, GameData.prototype.destroy = function() {
    this.entities = null, Animyst.Database.prototype.destroy.call(this);
}, GameData.prototype.addEntity = function(a, b, c) {
    this.entities[a] || (this.entities[a] = {}, this.entities[a].count = 0);
    var d = {};
    if (d.id = b || a + "_" + this.entities[a].count, d.type = a, c) for (var e in c) d[e] = c[e];
    return this.entities[a][d.id] = d, this.entities[a].count++, this.entities._total++, 
    this.signal.dispatch(GameData.ENTITY_ADDED, d), this.addedSignal.dispatch(d), d;
}, GameData.prototype.getEntity = function(a, b) {
    if (!b) for (var c in this.entities) {
        var d = this.entities[c];
        for (var e in d) if (a == e) {
            b = c;
            break;
        }
        if (b) break;
    }
    if (b && this.entities[b][a]) return this.entities[b][a];
}, GameData.prototype.removeEntity = function(a, b) {
    if (!b) for (var c in this.entities) {
        var d = this.entities[c];
        for (var e in d) if (a == e) {
            b = c;
            break;
        }
        if (b) break;
    }
    if (b && this.entities[b][a]) {
        this.entities[b][a] = null, this.entities[b].count--, this.entities._total--, delete this.entities[b][a];
        var f = {
            id: a,
            type: b
        };
        this.signal.dispatch(GameData.ENTITY_REMOVED, f), this.removedSignal.dispatch(f);
    }
}, GameData.prototype.notifyUpdate = function(a, b) {
    var c = this.getEntity(a, b);
    c && (this.signal.dispatch(GameData.ENTITY_UPDATED, c), this.updateSignal.dispatch(c));
}, GameDisplay = function(a) {
    Animyst.System.call(this), this.gameData = a, this.layer = null, this.graphics = {}, 
    this.graphicProperties = {}, this.graphicProperties[GameDisplay.PLAYER] = {}, this.graphicProperties[GameDisplay.ENEMY] = {};
}, GameDisplay.PLAYER = 0, GameDisplay.ENEMY01 = 1, GameDisplay.prototype = Object.create(Animyst.System.prototype), 
GameDisplay.prototype.startup = function(a) {
    this.gameData.signal.add(this.entityHandler, this), this.layer = a.layer || new Layer({
        position: new Point()
    }), Animyst.System.prototype.startup.call(this, a);
}, GameDisplay.prototype.shutdown = function() {
    Animyst.System.prototype.shutdown.call(this);
}, GameDisplay.prototype.update = function() {
    Animyst.System.prototype.update.call(this);
}, GameDisplay.prototype.entityHandler = function(a, b) {
    switch (a) {
      case GameData.ENTITY_ADDED:
        var c = this.createGraphic(this.graphicProperties[b.graphic]);
        c.position = b.position.clone(), this.layer.addChild(c), this.graphics[b.id] = c;
        break;

      case GameData.ENTITY_UPDATED:
        var c = this.getGraphicByID(b.id);
        c.position.x = b.position.x, c.position.y = b.position.y;
        break;

      case GameData.ENTITY_REMOVED:
        var c = this.getGraphicByID(b.id);
        c.remove(), this.graphics[b.id] = null, delete this.graphics[b.id];
    }
}, GameDisplay.prototype.createGraphic = function() {
    return new Shape.Circle({
        radius: 20,
        fillColor: "#00FFFF"
    });
}, GameDisplay.prototype.getGraphicByID = function(a) {
    return this.graphics[a];
}, GameLogic = function(a, b) {
    Animyst.System.call(this), this.gameData = a, this.inputData = b, this.screenDimensions = new Point(), 
    this.commands = {
        up: !1,
        down: !1,
        left: !1,
        right: !1,
        fire: !1,
        bomb: !1,
        focus: !1
    };
}, GameLogic.prototype = Object.create(Animyst.System.prototype), GameLogic.prototype.startup = function(a) {
    Animyst.System.prototype.startup.call(this), this.screenDimensions.x = Animyst.Window.width, 
    this.screenDimensions.y = Animyst.Window.height;
    var b = this.gameData.addEntity(GameData.PLAYER, "player", {
        vector: new Point(),
        position: new Point(),
        neutralSpeed: new Point(10, 10),
        focusSpeed: new Point(5, 5),
        focus: !1,
        graphic: GameDisplay.PLAYER
    });
    b.position.x = this.screenDimensions.x / 2, b.position.y = this.screenDimensions.y / 2, 
    console.log(this.screenDimensions), this.gameData.notifyUpdate("player", GameData.PLAYER), 
    Animyst.System.prototype.startup.call(this, a);
}, GameLogic.prototype.shutdown = function() {
    Animyst.System.prototype.shutdown.call(this);
}, GameLogic.prototype.update = function() {
    this.updateCommands(), this.updatePlayer(), Animyst.System.prototype.update.call(this);
}, GameLogic.prototype.updateCommands = function() {
    this.commands.up = this.inputData.isKeyDown("up"), this.commands.down = this.inputData.isKeyDown("down"), 
    this.commands.left = this.inputData.isKeyDown("left"), this.commands.right = this.inputData.isKeyDown("right"), 
    this.commands.fire = this.inputData.isKeyDown("z"), this.commands.focus = this.inputData.isKeyDown("shift");
}, GameLogic.prototype.updatePlayer = function() {
    var a = this.gameData.getEntity("player", GameData.PLAYER);
    a.focus = this.commands.focus;
    var b = a.focus ? a.focusSpeed : a.neutralSpeed;
    a.vector.x = this.commands.left || this.commands.right ? this.commands.left ? -b.x : b.x : 0, 
    a.vector.y = this.commands.up || this.commands.down ? this.commands.up ? -b.y : b.y : 0, 
    a.position = a.position.add(a.vector), this.gameData.notifyUpdate("player", GameData.PLAYER);
}, Animyst.InputDisplay = function(a) {
    Animyst.System.call(this), this.inputData = a, this.layer = null, this.mouse = null, 
    this.touches = {};
}, Animyst.InputDisplay.prototype = Object.create(Animyst.System.prototype), Animyst.InputDisplay.prototype.startup = function(a) {
    this.inputData.signal.add(this.inputHandler, this), this.layer = a.layer || new Layer({
        position: new Point()
    }), Animyst.System.prototype.startup.call(this, a);
}, Animyst.InputDisplay.prototype.shutdown = function() {
    this.started = !1, Animyst.System.prototype.shutdown.call(this);
}, Animyst.InputDisplay.prototype.update = function() {}, Animyst.InputDisplay.prototype.inputHandler = function(a, b, c) {
    switch (a) {
      case Animyst.InputData.MOUSE:
        this.mouse || (this.mouse = new Shape.Circle({
            radius: 10,
            fillColor: "#00FFFF",
            opacity: .5
        }), this.layer.addChild(this.mouse)), this.mouse.position = c.point, this.mouse.fillColor = c.down ? "#FF0000" : "#00FFFF";
        break;

      case Animyst.InputData.TOUCH:
        switch (b) {
          case Animyst.InputData.TOUCH_ADDED:
            var d = c.uid, e = new Shape.Circle({
                radius: 30,
                fillColor: "#FF0000",
                opacity: .5
            });
            c.webkitForce && (e.radius = 50 * (1 + c.webkitForce)), e.position = new Point(c.pageX, c.pageY), 
            this.touches[d] = e;
            break;

          case Animyst.InputData.TOUCH_REMOVED:
            var d = c.uid, e = this.touches[d];
            e.remove(), this.touches[d] = null, delete this.touches[d];
            break;

          case Animyst.InputData.TOUCH_UPDATED:
            var d = c.uid, e = this.touches[d];
            c.webkitForce && (e.radius = 50 * (1 + c.webkitForce)), e.position = new Point(c.pageX, c.pageY);
        }
        break;

      case Animyst.InputData.KEY:    }
};

var Main = function() {
    this.game = null, this.app = null;
};

Main.prototype = {
    start: function() {
        console.log("===== MAIN ======"), this.app = new Animyst.Application(), this.app.initSignal.addOnce(this.onAppInit, this), 
        this.app.startup({
            paper: !0,
            canvasID: "game"
        });
    },
    onAppInit: function() {
        var a = new Game("game1");
        this.app.run(a);
    }
};