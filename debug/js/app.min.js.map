{"version":3,"sources":["app.min.js","Game.ts","Main.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","App","Game","_super","call","setup","console","log","viewport","Animyst","View3D","init","resize","debugControls","append","Scene3D","addAxis","cameras","name","type","x","y","z","fov","aspect","near","far","main","get","frameUpdate","delta","framecount","render","AppState","Main","_this","initSignal","addOnce","onInit","bootSignal","onBoot","Log","output","game","run","Application"],"mappings":"AAAA,GAAIA,WAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,KCH5EO,KAAP,SAAOA,GACN,GAAAC,GAAA,SAAAC,GAKC,QAAAD,KDIU,MCHTC,GAAAC,KAAAb,KAAM,SAAOA,KAiDf,MAvD0BD,WAAAY,EAAAC,GAWlBD,EAAAJ,UAAAO,MAAP,WACCC,QAAQC,IAAI,mBAEZhB,KAAKiB,SAAW,GAAIC,SAAQC,OAC5BnB,KAAKiB,SAASG,MAAMC,QAAS,EAAMC,eAAgB,IACnDtB,KAAKiB,SAASM,SAEdvB,KAAKiB,SAASR,OAAOS,QAAQM,QAAS,QACrCC,SAAU,EACVH,eAAe,EACfI,UACEC,KAAK,UAAWC,KAAK,cAAeC,EAAG,IAAKC,EAAE,IAAKC,EAAE,IAAKC,IAAI,GAAIC,OAAQjC,KAAKiB,SAASgB,OAAQC,KAAM,GAAKC,IAAK,IAAMC,MAAK,KAI9EpC,MAAKiB,SAASoB,IAAI,SAyB5D1B,EAAAJ,UAAA+B,YAAP,SAAmBC,EAAcC,GAChC5B,EAAAL,UAAM+B,YAAWzB,KAAAb,KAACuC,EAAOC,GACtBxC,KAAKiB,UAAUjB,KAAKiB,SAASwB,UAElC9B,GAvD0BO,QAAQwB,SAArBhC,GAAAC,KAAIA,GADXD,MAAAA,QCAP,IAAOA,MAAP,SAAOA,GACN,GAAAiC,GAAA,SAAA/B,GAEC,QAAA+B,KAAA,GAAAC,GACChC,EAAAC,KAAAb,OAAOA,IF6DE,OE5DT4C,GAAKC,WAAWC,QAAQF,EAAKG,OAAQH,GACrCA,EAAKI,WAAWF,QAAQF,EAAKK,OAAQL,GF2DrBA,EE5ClB,MApB0B7C,WAAA4C,EAAA/B,GASlB+B,EAAApC,UAAA0C,OAAP,WACC/B,QAAQgC,IAAIC,OAAO,gBAGbR,EAAApC,UAAAwC,OAAP,WACC7B,QAAQgC,IAAIC,OAAO,mBAEnB,IAAIC,GAAY,GAAI1C,GAAAC,IACpBX,MAAKqD,IAAID,IAGXT,GApB0BzB,QAAQoC,YAArB5C,GAAAiC,KAAIA,GADXjC,MAAAA","file":"app.min.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar App;\n(function (App) {\n    var Game = (function (_super) {\n        __extends(Game, _super);\n        function Game() {\n            return _super.call(this, \"game\") || this;\n            // code...\n        }\n        Game.prototype.setup = function () {\n            console.log(\"Setting up game\");\n            this.viewport = new Animyst.View3D();\n            this.viewport.init({ resize: true, debugControls: true });\n            this.viewport.append();\n            this.viewport.create(Animyst.Scene3D, 'base', {\n                addAxis: true,\n                debugControls: true,\n                cameras: [\n                    { name: \"camera0\", type: \"perspective\", x: 500, y: 500, z: 500, fov: 50, aspect: this.viewport.aspect, near: 0.1, far: 2000, main: true }\n                ]\n            });\n            var scene3D = this.viewport.get('base');\n            /*\t\t\tvar geom:THREE.PlaneGeometry = new THREE.PlaneGeometry(5,5,32);\n                        var matr:THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial({color: 0x00ff00});\n            \n                        var meshA:THREE.Mesh = new THREE.Mesh(geom, matr);\n                        var meshB:THREE.Mesh = new THREE.Mesh(geom, matr);\n            \n                        meshA.position.set( 10, 10,0);\n                        meshB.position.set(-10,-10,0);\n            \n                        var group:THREE.Group = new THREE.Group();\n                        group.add(meshA);\n                        group.add(meshB);\n            \n                        let vFOV = (<THREE.PerspectiveCamera> this.viewport.camera).fov * (Math.PI / 180);\n                        let distance =  this.viewport.height / (2 * Math.tan(vFOV / 2)) ;\n            \n                        group.position.set(0, 0, -distance);\n            \n            \n                        this.viewport.scene.add(group);\n                        this.viewport.camera.add(group);*/\n        };\n        Game.prototype.frameUpdate = function (delta, framecount) {\n            _super.prototype.frameUpdate.call(this, delta, framecount);\n            if (this.viewport)\n                this.viewport.render();\n        };\n        return Game;\n    }(Animyst.AppState));\n    App.Game = Game;\n})(App || (App = {}));\nvar App;\n(function (App) {\n    var Main = (function (_super) {\n        __extends(Main, _super);\n        function Main() {\n            var _this = _super.call(this) || this;\n            _this.initSignal.addOnce(_this.onInit, _this);\n            _this.bootSignal.addOnce(_this.onBoot, _this);\n            return _this;\n        }\n        Main.prototype.onBoot = function () {\n            Animyst.Log.output(\"App Booted!\");\n        };\n        Main.prototype.onInit = function () {\n            Animyst.Log.output(\"App Initialized!\");\n            var game = new App.Game();\n            this.run(game);\n        };\n        return Main;\n    }(Animyst.Application));\n    App.Main = Main;\n})(App || (App = {}));\n","module App {\n\texport class Game extends Animyst.AppState {\n\t\t\n\n\t\tpublic viewport:Animyst.View3D;\n\n\t\tconstructor() {\n\t\t\tsuper(\"game\");\n\t\t\t// code...\n\t\t}\n\n\n\t\tpublic setup():void{\n\t\t\tconsole.log(\"Setting up game\");\n\n\t\t\tthis.viewport = new Animyst.View3D();\n\t\t\tthis.viewport.init({resize : true, debugControls : true});\n\t\t\tthis.viewport.append();\n\n\t\t\tthis.viewport.create(Animyst.Scene3D, 'base', {\n\t\t\t\taddAxis : true,\n\t\t\t\tdebugControls: true,\n\t\t\t\tcameras : [\n\t\t\t\t\t{name:\"camera0\", type:\"perspective\", x: 500, y:500, z:500, fov:50, aspect: this.viewport.aspect, near: 0.1, far: 2000, main:true}\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tvar scene3D:Animyst.Scene3D = <Animyst.Scene3D> this.viewport.get('base');\n\n/*\t\t\tvar geom:THREE.PlaneGeometry = new THREE.PlaneGeometry(5,5,32);\n\t\t\tvar matr:THREE.MeshBasicMaterial = new THREE.MeshBasicMaterial({color: 0x00ff00});\n\n\t\t\tvar meshA:THREE.Mesh = new THREE.Mesh(geom, matr);\n\t\t\tvar meshB:THREE.Mesh = new THREE.Mesh(geom, matr);\n\n\t\t\tmeshA.position.set( 10, 10,0);\n\t\t\tmeshB.position.set(-10,-10,0);\n\n\t\t\tvar group:THREE.Group = new THREE.Group();\n\t\t\tgroup.add(meshA);\n\t\t\tgroup.add(meshB);\n\n\t\t\tlet vFOV = (<THREE.PerspectiveCamera> this.viewport.camera).fov * (Math.PI / 180);\n\t\t\tlet distance =  this.viewport.height / (2 * Math.tan(vFOV / 2)) ;\n\n\t\t\tgroup.position.set(0, 0, -distance);\n\n\n\t\t\tthis.viewport.scene.add(group);\n\t\t\tthis.viewport.camera.add(group);*/\t\n\t\t}\n\n\t\tpublic frameUpdate(delta:number, framecount:number):void{\n\t\t\tsuper.frameUpdate(delta, framecount);\n\t\t\tif(this.viewport) this.viewport.render();\n\t\t}\n\t}\n}","module App {\n\texport class Main extends Animyst.Application{\n\t\t\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.initSignal.addOnce(this.onInit, this);\n\t\t\tthis.bootSignal.addOnce(this.onBoot, this);\n\n\t\t}\n\n\t\tpublic onBoot():void{\n\t\t\tAnimyst.Log.output(\"App Booted!\");\n\t\t}\n\n\t\tpublic onInit():void{\n\t\t\tAnimyst.Log.output(\"App Initialized!\");\n\n\t\t\tvar game:Game = new Game();\n\t\t\tthis.run(game);\n\t\t}\n\n\t}\n}"],"sourceRoot":"./src"}