{"version":3,"sources":["app.min.js","Main.ts","tests/PIXITests.ts","tests/View3DTests.ts"],"names":["__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","App","Main","_super","_this","call","initSignal","addOnce","onInit","bootSignal","onBoot","Animyst","Log","output","runTest","PIXITests","cls","state","run","Application","setup","viewport","PIXIView","init","backgroundColor","append","t1","PIXI","Texture","from","DataLoad","getPath","t3","s1","Sprite","s2","atlas","spine","core","TextureAtlas","getAsset","line","callback","BaseTexture","rawSkelData","spineJSONParser","SkeletonJson","AtlasAttachmentLoader","skeletonData","readSkeletonData","anim","Spine","stage","addChild","hasAnimation","setAnimation","scale","set","x","halfWidth","y","halfHeight","height","width","interactive","frameUpdate","delta","framecount","render","AppState","View3DTests","console","log","View3D","resize","debugControls","Scene3D","addAxis","cameras","name","type","z","fov","aspect","near","far","main","left","right","top","bottom","lookAtScene","base","get","ui","texture0","THREE","CanvasTexture","texture1","smatr0","SpriteMaterial","map","color","smatr1","spriteBase","spriteUI","twidth","material","image","theight","position","scene","add"],"mappings":"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","file":"app.min.js","sourcesContent":["var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar App;\n(function (App) {\n    var Main = (function (_super) {\n        __extends(Main, _super);\n        function Main() {\n            var _this = _super.call(this) || this;\n            _this.initSignal.addOnce(_this.onInit, _this);\n            _this.bootSignal.addOnce(_this.onBoot, _this);\n            return _this;\n        }\n        Main.prototype.onBoot = function () {\n            Animyst.Log.output(\"App Booted!\");\n        };\n        Main.prototype.onInit = function () {\n            Animyst.Log.output(\"App Initialized!\");\n            this.runTest(App.PIXITests);\n        };\n        Main.prototype.runTest = function (cls) {\n            var state = new cls();\n            this.run(state);\n        };\n        return Main;\n    }(Animyst.Application));\n    App.Main = Main;\n})(App || (App = {}));\nvar App;\n(function (App) {\n    var PIXITests = (function (_super) {\n        __extends(PIXITests, _super);\n        function PIXITests() {\n            return _super.call(this, 'PIXITests') || this;\n        }\n        PIXITests.prototype.setup = function () {\n            this.viewport = new Animyst.PIXIView();\n            this.viewport.init({\n                backgroundColor: 0x555555\n            });\n            this.viewport.append();\n            var t1 = PIXI.Texture.from(Animyst.DataLoad.getPath('redball1')); //PIXI.Texture.fromCanvas(Animyst.DataLoad.getAsset('redball1'));\n            var t2 = PIXI.Texture.from(Animyst.DataLoad.getPath('yellowball1')); //PIXI.Texture.fromCanvas(Animyst.DataLoad.getAsset('yellowball1'));\n            var t3 = PIXI.Texture.from(Animyst.DataLoad.getPath('redball1')); //PIXI.Texture.fromCanvas(Animyst.DataLoad.getAsset('greenball1'));\n            var s1 = new PIXI.Sprite(t1); //PIXI.Sprite.fromImage(Animyst.DataLoad.getData('redball1').src);\n            var s2 = new PIXI.Sprite(t3);\n            var atlas = new PIXI.spine.core.TextureAtlas(Animyst.DataLoad.getAsset('raptor_atlas'), function (line, callback) {\n                callback(PIXI.BaseTexture.from(Animyst.DataLoad.getPath('raptor_sheet')));\n            });\n            var rawSkelData = Animyst.DataLoad.getAsset('raptor_data');\n            var spineJSONParser = new PIXI.spine.core.SkeletonJson(new PIXI.spine.core.AtlasAttachmentLoader(atlas));\n            var skeletonData = spineJSONParser.readSkeletonData(rawSkelData);\n            var anim = new PIXI.spine.Spine(skeletonData);\n            this.viewport.stage.addChild(anim);\n            if (anim.state.hasAnimation(\"walk\")) {\n                anim.state.setAnimation(0, \"walk\", true);\n            }\n            anim.scale.set(0.75, 0.75);\n            anim.x = this.viewport.halfWidth;\n            anim.y = this.viewport.halfHeight + anim.height / 2;\n            //var skeleton:PIXI.spine.core.SkeletonData = new PIXI.spine.core.SkeletonData();\n            //var anim:PIXI.spine.Spine = new PIXI.spine.Spine();\n            //this.viewport.stage.addChild(s1);\n            //this.viewport.stage.addChild(s2);\n            s1.x = 100;\n            s1.y = 100;\n            s2.x = this.viewport.width / 2;\n            s2.y = this.viewport.height / 2;\n            s1.interactive = true;\n        };\n        PIXITests.prototype.frameUpdate = function (delta, framecount) {\n            this.viewport.render();\n        };\n        return PIXITests;\n    }(Animyst.AppState));\n    App.PIXITests = PIXITests;\n})(App || (App = {}));\nvar App;\n(function (App) {\n    var View3DTests = (function (_super) {\n        __extends(View3DTests, _super);\n        function View3DTests() {\n            return _super.call(this, \"game\") || this;\n            // code...\n        }\n        View3DTests.prototype.setup = function () {\n            console.log(\"Setting up game\");\n            this.viewport = new Animyst.View3D();\n            this.viewport.init({ resize: true, debugControls: true });\n            this.viewport.append();\n            this.viewport.create(Animyst.Scene3D, 'base', {\n                addAxis: true,\n                debugControls: true,\n                cameras: [\n                    { name: \"camera0\", type: \"perspective\", x: 500, y: 500, z: 500, fov: 50, aspect: this.viewport.aspect, near: 0.1, far: 2000, main: true }\n                ]\n            });\n            this.viewport.create(Animyst.Scene3D, 'ui', {\n                addAxis: true,\n                debugControls: false,\n                cameras: [\n                    {\n                        name: \"camera0\", type: \"orthographic\",\n                        x: this.viewport.width / 2, y: -this.viewport.height / 2, z: 10,\n                        left: -this.viewport.width / 2, right: this.viewport.width / 2,\n                        top: this.viewport.height / 2, bottom: -this.viewport.height / 2,\n                        near: 1, far: 2000, main: true, lookAtScene: false\n                    }\n                ]\n            });\n            var base = this.viewport.get('base');\n            var ui = this.viewport.get('ui');\n            var texture0 = new THREE.CanvasTexture(Animyst.DataLoad.getAsset(\"redball1\"));\n            var texture1 = new THREE.CanvasTexture(Animyst.DataLoad.getAsset(\"greenball2\"));\n            var smatr0 = new THREE.SpriteMaterial({ map: texture0, color: 0xffffff });\n            var smatr1 = new THREE.SpriteMaterial({ map: texture1, color: 0xffffff });\n            var spriteBase = new THREE.Sprite(smatr1);\n            var spriteUI = new THREE.Sprite(smatr0);\n            var twidth = spriteUI.material.map.image.width;\n            var theight = spriteUI.material.map.image.height;\n            console.log(twidth, theight, this.viewport.width, this.viewport.height);\n            spriteUI.scale.set(twidth, theight, 1);\n            spriteUI.position.set(178, -18, 0);\n            spriteBase.position.set(100, 100, 100);\n            spriteBase.scale.set(twidth / 2, theight / 2, 1);\n            base.scene.add(spriteBase);\n            ui.scene.add(spriteUI);\n        };\n        View3DTests.prototype.frameUpdate = function (delta, framecount) {\n            _super.prototype.frameUpdate.call(this, delta, framecount);\n            if (this.viewport)\n                this.viewport.render();\n        };\n        return View3DTests;\n    }(Animyst.AppState));\n    App.View3DTests = View3DTests;\n})(App || (App = {}));\n","module App {\n\texport class Main extends Animyst.Application{\n\t\t\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis.initSignal.addOnce(this.onInit, this);\n\t\t\tthis.bootSignal.addOnce(this.onBoot, this);\n\n\t\t}\n\n\t\tpublic onBoot():void{\n\t\t\tAnimyst.Log.output(\"App Booted!\");\n\t\t}\n\n\t\tpublic onInit():void{\n\t\t\tAnimyst.Log.output(\"App Initialized!\");\n\n\t\t\tthis.runTest(PIXITests);\n\t\t}\n\n\t\tpublic runTest(cls:any):void{\n\t\t\tvar state:Animyst.AppState = <Animyst.AppState> new cls();\n\t\t\tthis.run(state);\n\t\t}\n\n\t}\n}","module App {\r\n    export class PIXITests extends Animyst.AppState {\r\n    \t\r\n    \tpublic viewport:Animyst.PIXIView;\r\n\r\n    \tconstructor() {\r\n    \t\tsuper('PIXITests');\r\n    \t}\r\n\r\n    \tpublic setup():void{\r\n    \t\tthis.viewport = new Animyst.PIXIView();\r\n    \t\tthis.viewport.init({\r\n    \t\t\tbackgroundColor: 0x555555 \r\n    \t\t});\r\n    \t\tthis.viewport.append();\r\n\r\n    \t\tvar t1:PIXI.Texture = PIXI.Texture.from(Animyst.DataLoad.getPath('redball1'));//PIXI.Texture.fromCanvas(Animyst.DataLoad.getAsset('redball1'));\r\n    \t\tvar t2:PIXI.Texture = PIXI.Texture.from(Animyst.DataLoad.getPath('yellowball1'));//PIXI.Texture.fromCanvas(Animyst.DataLoad.getAsset('yellowball1'));\r\n    \t\tvar t3:PIXI.Texture = PIXI.Texture.from(Animyst.DataLoad.getPath('redball1'));//PIXI.Texture.fromCanvas(Animyst.DataLoad.getAsset('greenball1'));\r\n\r\n\r\n    \t\tvar s1:PIXI.Sprite = new PIXI.Sprite(t1);//PIXI.Sprite.fromImage(Animyst.DataLoad.getData('redball1').src);\r\n    \t\tvar s2:PIXI.Sprite = new PIXI.Sprite(t3);\r\n\r\n            \r\n            var atlas:any = new PIXI.spine.core.TextureAtlas(Animyst.DataLoad.getAsset('raptor_atlas'), function(line, callback){\r\n                callback(PIXI.BaseTexture.from(Animyst.DataLoad.getPath('raptor_sheet')));\r\n            });\r\n\r\n            var rawSkelData:any = Animyst.DataLoad.getAsset('raptor_data');\r\n            var spineJSONParser:any = new PIXI.spine.core.SkeletonJson(new PIXI.spine.core.AtlasAttachmentLoader(atlas));\r\n            var skeletonData:any = spineJSONParser.readSkeletonData(rawSkelData);\r\n\r\n            var anim:PIXI.spine.Spine = new PIXI.spine.Spine(skeletonData);\r\n\r\n            this.viewport.stage.addChild(anim);\r\n\r\n            if(anim.state.hasAnimation(\"walk\")){\r\n                anim.state.setAnimation(0, \"walk\", true);\r\n            }\r\n\r\n           \r\n            anim.scale.set(0.75, 0.75);\r\n\r\n            anim.x = this.viewport.halfWidth;\r\n            anim.y = this.viewport.halfHeight + anim.height / 2;\r\n\r\n\r\n\r\n\r\n            //var skeleton:PIXI.spine.core.SkeletonData = new PIXI.spine.core.SkeletonData();\r\n\r\n            //var anim:PIXI.spine.Spine = new PIXI.spine.Spine();\r\n\r\n    \t\t\r\n\r\n    \t\t//this.viewport.stage.addChild(s1);\r\n    \t\t//this.viewport.stage.addChild(s2);\r\n    \t\ts1.x = 100;\r\n    \t\ts1.y = 100;\r\n\r\n    \t\ts2.x = this.viewport.width / 2;\r\n    \t\ts2.y = this.viewport.height / 2;\r\n\r\n    \t\ts1.interactive = true;\r\n    \t}\r\n\r\n    \tpublic frameUpdate(delta:number, framecount:number):void{\r\n    \t\tthis.viewport.render();\t\r\n    \t}\r\n    }\r\n}","module App {\n\texport class View3DTests extends Animyst.AppState {\n\t\t\n\n\t\tpublic viewport:Animyst.View3D;\n\n\t\tconstructor() {\n\t\t\tsuper(\"game\");\n\t\t\t// code...\n\t\t}\n\n\n\t\tpublic setup():void{\n\t\t\tconsole.log(\"Setting up game\");\n\n\t\t\tthis.viewport = new Animyst.View3D();\n\t\t\tthis.viewport.init({resize : true, debugControls : true});\n\t\t\tthis.viewport.append();\n\n\n\t\t\tthis.viewport.create(Animyst.Scene3D, 'base', {\n\t\t\t\taddAxis : true,\n\t\t\t\tdebugControls: true,\n\t\t\t\tcameras : [\n\t\t\t\t\t{name:\"camera0\", type:\"perspective\", x: 500, y:500, z:500, fov:50, aspect: this.viewport.aspect, near: 0.1, far: 2000, main:true}\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tthis.viewport.create(Animyst.Scene3D, 'ui', {\n\t\t\t\taddAxis : true,\n\t\t\t\tdebugControls: false,\n\t\t\t\tcameras : [\n\t\t\t\t\t{\t\n\t\t\t\t\t\tname:\"camera0\", type:\"orthographic\", \n\t\t\t\t\t\tx:this.viewport.width/2, y:-this.viewport.height/2, z:10, \n\t\t\t\t\t\tleft : - this.viewport.width / 2, right: this.viewport.width / 2, \n\t\t\t\t\t\ttop: this.viewport.height / 2, bottom: -this.viewport.height / 2,\n\t\t\t\t\t \tnear: 1, far: 2000, main:true, lookAtScene:false\n\t\t\t\t\t }\n\t\t\t\t]\n\t\t\t});\n\n\t\t\tvar base:Animyst.Scene3D = <Animyst.Scene3D> this.viewport.get('base');\n\t\t\tvar ui:Animyst.Scene3D   = <Animyst.Scene3D> this.viewport.get('ui');\n\n\t\t\tvar texture0:THREE.CanvasTexture = new THREE.CanvasTexture(Animyst.DataLoad.getAsset(\"redball1\"));\n\t\t\tvar texture1:THREE.CanvasTexture = new THREE.CanvasTexture(Animyst.DataLoad.getAsset(\"greenball2\"));\n\n\t\t\tvar smatr0:THREE.SpriteMaterial = new THREE.SpriteMaterial({map: texture0, color: 0xffffff});\n\t\t\tvar smatr1:THREE.SpriteMaterial = new THREE.SpriteMaterial({map: texture1, color: 0xffffff});\n\n\t\t\tvar spriteBase:THREE.Sprite = new THREE.Sprite(smatr1);\n\t\t\tvar spriteUI:THREE.Sprite = new THREE.Sprite(smatr0);\n\n\n\n\t\t\tvar twidth = spriteUI.material.map.image.width;\n\t\t\tvar theight = spriteUI.material.map.image.height;\n\n\t\t\tconsole.log(twidth, theight, this.viewport.width, this.viewport.height);\n\n\t\t\t\n\t\t\tspriteUI.scale.set(twidth, theight, 1);\n\t\t\tspriteUI.position.set(178, -18, 0);\n\n\t\t\tspriteBase.position.set(100, 100, 100);\n\t\t\tspriteBase.scale.set(twidth / 2, theight / 2, 1);\n\n\n\t\t\tbase.scene.add(spriteBase);\n\t\t\tui.scene.add(spriteUI);\n\t\t}\n\n\t\tpublic frameUpdate(delta:number, framecount:number):void{\n\t\t\tsuper.frameUpdate(delta, framecount);\n\t\t\tif(this.viewport) this.viewport.render();\n\t\t}\n\t}\n}"],"sourceRoot":"./src"}